[{"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\index.tsx":"1","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\reportWebVitals.ts":"2","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\App.tsx":"3","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\Header.tsx":"4","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\home\\Home.tsx":"5","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\login\\LoginForm.tsx":"6","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\remote\\reimbursomatic\\reimbursomatic-functions.ts":"7","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\remote\\reimbursomatic\\index.ts":"8","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\ThemeProvider.tsx":"9","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\Home\\Home.tsx":"10","C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\ticket-manager\\TicketManager.tsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1402,"mtime":1609726279422,"results":"15","hashOfConfig":"13"},{"size":1599,"mtime":1609620884356,"results":"16","hashOfConfig":"13"},{"size":948,"mtime":1609454695487,"results":"17","hashOfConfig":"13"},{"size":3611,"mtime":1609642119678,"results":"18","hashOfConfig":"13"},{"size":5206,"mtime":1609774644235,"results":"19","hashOfConfig":"13"},{"size":229,"mtime":1609382908173,"results":"20","hashOfConfig":"13"},{"size":331,"mtime":1609427988193,"results":"21","hashOfConfig":"13"},{"size":15694,"mtime":1609734831713,"results":"22","hashOfConfig":"13"},{"size":12383,"mtime":1609734889631,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1wc4al5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\index.tsx",[],["48","49"],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\reportWebVitals.ts",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\App.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\Header.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\home\\Home.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\login\\LoginForm.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\remote\\reimbursomatic\\reimbursomatic-functions.ts",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\remote\\reimbursomatic\\index.ts",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\ThemeProvider.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\Home\\Home.tsx",[],"C:\\Users\\Stephen\\Desktop\\Revature\\Project 1\\project-1-Sizarazis\\client\\reimbursomatic-view\\src\\components\\ticket-manager\\TicketManager.tsx",["50","51"],"import { Box, Button, Collapse, createStyles, FormControl, IconButton, InputLabel, makeStyles, MenuItem, Paper, Select, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Theme, Typography } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport { PowerSettingsNewRounded } from '@material-ui/icons';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Redirect } from 'react-router'\r\nimport Reimbursement from '../../models/Reimbursement';\r\nimport User from '../../models/User'\r\nimport { getAllReimbursements, getCurrentUsersReimbursements, UpdateReimbursement } from '../remote/reimbursomatic/reimbursomatic-functions';\r\n\r\n\r\n//This page allows a HR employee or an admin to search through tickets and view, accept, or decline them.\r\n//It just needs to be a table (see \"Collapsible table\" in material-ui)\r\n//But, the different options for the table will return different results\r\n//  - Get all tickets by user\r\n//  - Get all pending/accepted/declined tickets\r\n//  - Get all tickets by type\r\n//  - Get a ticket by ID\r\n// NOTE: also needs a button to logout\r\n\r\n//If I have time:\r\n//  - sorting options\r\n//  - different icons for the kinds of reimbursement requests\r\n//  - skeletons for when the table is updating\r\n//  - accessibility\r\n\r\n\r\ninterface IUser {\r\n    currentUser: User\r\n}\r\n\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n      color: 'white'\r\n    },\r\n    greenButton: {\r\n        color: 'white',\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n        backgroundColor: green[700],\r\n        },\r\n    },\r\n    redButton: {\r\n        color: 'white',\r\n        backgroundColor: red[500],\r\n        '&:hover': {\r\n        backgroundColor: red[700],\r\n        },\r\n    }\r\n  });\r\n  \r\n  function createData(\r\n    id: number,\r\n    amount: number,\r\n    dateSubmitted: string,\r\n    dateResolved: string,\r\n    authorId: number,\r\n    resolverId: number,\r\n    statusId: number,\r\n    typeId: number,\r\n    description: string\r\n  ) {\r\n    return {\r\n      id,\r\n      amount,\r\n      dateSubmitted,\r\n      dateResolved,\r\n      authorId,\r\n      resolverId,\r\n      statusId,\r\n      typeId,\r\n      description\r\n    };\r\n  }\r\n  \r\n  function Row(props: { row: ReturnType<typeof createData>, currentUser: User, rowChanges: number, pinger: any}) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    //THIS IS A HACK TO SAVE ME TIME BECAUSE I'M BEHIND ON THIS PROJECT\r\n    const ReimbursementStatus = [\"Denied\", \"Pending\", \"Approved\" ]\r\n    const ReimbursementTypes = [\"Lodging\", \"Travel\",\"Food\", \"Other\"]\r\n\r\n    function parseDateString(dateString:string) {\r\n        let out: string = \"\"\r\n        if (dateString) {\r\n          let date = new Date(dateString);\r\n    \r\n          let month: string = (date.getMonth() + 1 < 10) ? (`0` + String(date.getMonth() + 1)) : String(date.getMonth() + 1)\r\n          let day: string = (date.getDate() < 10) ? (`0` + String(date.getDate())) : String(date.getDate())\r\n          let minutes: string = date.getMinutes() < 10 ? (`0` + String(date.getMinutes())) : String(date.getMinutes())\r\n          let seconds: string = date.getSeconds() < 10 ? (`0` + String(date.getSeconds())) : String(date.getSeconds())\r\n    \r\n          out = date.getFullYear() + `-` + month + `-` + day + \r\n                  `T` + (date.getHours()) + `:` + minutes + `:` + seconds\r\n        }\r\n        return out\r\n      }\r\n\r\n    const submittedDate = parseDateString(row.dateSubmitted);\r\n    const resolvedDate = parseDateString(row.dateResolved);\r\n\r\n    const acceptReimbursementRequest = async() => {\r\n        let userIdNum:Number = Number(props.currentUser.id)\r\n        let safeAmount:string = String(row.amount)\r\n        \r\n        await UpdateReimbursement(row.id, safeAmount, row.dateSubmitted, row.description, row.authorId, userIdNum, 3, row.typeId)\r\n        props.pinger(props.rowChanges + 1);\r\n    }\r\n\r\n    const rejectReimbursementRequest = async() => {\r\n        let userIdNum:Number = Number(props.currentUser.id)\r\n        let safeAmount:string = String(row.amount)\r\n        \r\n        await UpdateReimbursement(row.id, safeAmount, row.dateSubmitted, row.description, row.authorId, userIdNum, 1, row.typeId)\r\n        props.pinger(props.rowChanges + 1);\r\n    }\r\n\r\n    const classes = useRowStyles();\r\n\r\n    const disableButtonHandler = () => {\r\n        if (props.row.statusId !== 2) {\r\n            return <><TableCell align=\"center\" className={classes.root}>\r\n                        <Button className={classes.greenButton} variant=\"contained\" disabled={true}>Accept</Button>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={classes.root}>\r\n                        <Button className={classes.redButton} variant=\"contained\" disabled={true}>Decline</Button>\r\n                    </TableCell></>\r\n        } else {\r\n            return <><TableCell align=\"center\" className={classes.root}>\r\n            <Button className={classes.greenButton} variant=\"contained\" disabled={false} onClick={acceptReimbursementRequest}>Accept</Button>\r\n        </TableCell>\r\n        <TableCell align=\"center\" className={classes.root}>\r\n            <Button className={classes.redButton} variant=\"contained\" disabled={false} onClick={rejectReimbursementRequest}>Decline</Button>\r\n        </TableCell></>\r\n        }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.root}>\r\n          <TableCell>\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)} className={classes.root}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell component=\"th\" scope=\"row\" className={classes.root}>\r\n            {row.id}\r\n          </TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{row.amount}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{submittedDate}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{resolvedDate}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{row.authorId}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{row.resolverId}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{ReimbursementStatus[row.statusId-1]}</TableCell>\r\n          <TableCell align=\"right\" className={classes.root}>{ReimbursementTypes[row.typeId-1]}</TableCell>\r\n          {disableButtonHandler()}\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0, color:'white'}} colSpan={11}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  Description\r\n                </Typography>\r\n                <p>{ row.description }</p>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n\r\n    },\r\n    lineBreak: {\r\n        width: '75%',\r\n        height: '1px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        marginTop: '4em',\r\n        marginBottom: '2em',\r\n        maxWidth: 500,\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    headers: {\r\n        marginTop: '2em',\r\n        color: theme.palette.primary.main\r\n\r\n    },\r\n    table: {\r\n        width: '80%',\r\n        marginTop: '2em',\r\n        marginBottom: '2em',\r\n        marginLeft: '10%',\r\n        backgroundColor: '#333333',\r\n    },\r\n    tableCell: {\r\n        color: 'white',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        color: 'white',\r\n        backgroundColor: '#333333',\r\n    },\r\n    menuItem: {\r\n        color:'white',\r\n        backgroundColor: '#333333'\r\n    },\r\n  }),\r\n);\r\n\r\n\r\nexport const TicketManager : React.FunctionComponent<any> = (props:IUser) => {\r\n    const classes = useStyles();\r\n\r\n    const [reimbursements, setReimbursements] = useState([]);\r\n    const [filterState, setFilterState] = useState('');\r\n    const [rowChanges, pingRowChanges] = useState(0);\r\n\r\n    const handleFilterStateChange = (event: React.ChangeEvent<{value:unknown}>) => {\r\n        setFilterState(event.target.value as string);\r\n    }\r\n\r\n    let rows:any[] = [];\r\n    reimbursements.forEach((item) => {\r\n    rows.push(createData(\r\n        item.id, \r\n        item.amount, \r\n        item.submitted, \r\n        item.resolved, \r\n        item.authorId, \r\n        item.resolverId,\r\n        item.statusId,\r\n        item.typeId,\r\n        item.description))\r\n    })\r\n\r\n    useEffect(() => {\r\n        const attemptReimbursementGrab = async () => {\r\n            try {\r\n                let reimbursements:Reimbursement[] = await getAllReimbursements(props.currentUser)\r\n                if (filterState === 'pending') {\r\n                    reimbursements = reimbursements.filter((reimbursement) => {\r\n                        return reimbursement.statusId === 2;\r\n                    })\r\n                }\r\n                setReimbursements(reimbursements)\r\n            }\r\n            catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        \r\n        attemptReimbursementGrab()\r\n    },[props.currentUser, filterState, rowChanges])\r\n\r\n    return (\r\n        (props.currentUser && props.currentUser.roleId < 3) ?\r\n        <div>\r\n            <h1 style={{marginTop:'2em'}}>Ticket Manager</h1>\r\n            <div className={classes.lineBreak}></div>\r\n            <h2 className={classes.headers}>All Tickets</h2>\r\n            <Box>\r\n                <FormControl variant=\"filled\" className={classes.formControl}>\r\n                    <InputLabel id=\"filter-options-label\">Filter By</InputLabel>\r\n                    <Select\r\n                    labelId=\"filter-options\"\r\n                    id=\"filter-options\"\r\n                    value={filterState}\r\n                    className={classes.menuItem}\r\n                    onChange={handleFilterStateChange}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'pending'}>Pending</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <TableContainer component={Paper} className={classes.table}>\r\n                <Table aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell />\r\n                            <TableCell className={classes.tableCell}>Reimbursement ID</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Amount</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Date Submitted</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Date Resolved</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Author ID</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Resolver ID</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Status</TableCell>\r\n                            <TableCell align=\"right\" className={classes.tableCell}>Type</TableCell>\r\n                            <TableCell align=\"center\" className={classes.tableCell}></TableCell>\r\n                            <TableCell align=\"center\" className={classes.tableCell}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {rows.map((row) => (\r\n                      <Row key={row.id} currentUser={props.currentUser} row={row} rowChanges={rowChanges} pinger={pingRowChanges} />\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n        :\r\n        <Redirect to=\"/login\" />\r\n    )\r\n}",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":3,"column":10,"nodeType":"58","messageId":"59","endLine":3,"endColumn":33},{"ruleId":"56","severity":1,"message":"60","line":10,"column":32,"nodeType":"58","messageId":"59","endLine":10,"endColumn":61},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'PowerSettingsNewRounded' is defined but never used.","Identifier","unusedVar","'getCurrentUsersReimbursements' is defined but never used.","no-global-assign","no-unsafe-negation"]